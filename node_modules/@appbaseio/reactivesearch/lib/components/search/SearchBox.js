'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /** @jsx jsx */


var _constants = require('@appbaseio/reactivecore/lib/utils/constants');

var _transform = require('@appbaseio/reactivecore/lib/utils/transform');

var _core = require('@emotion/core');

var _emotionTheming = require('emotion-theming');

var _causes = require('@appbaseio/reactivecore/lib/utils/causes');

var _causes2 = _interopRequireDefault(_causes);

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _downshift = require('downshift');

var _downshift2 = _interopRequireDefault(_downshift);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _actions = require('@appbaseio/reactivecore/lib/actions');

var _hotkeysJs = require('hotkeys-js');

var _hotkeysJs2 = _interopRequireDefault(_hotkeysJs);

var _xss = require('xss');

var _xss2 = _interopRequireDefault(_xss);

var _PreferencesConsumer = require('../basic/PreferencesConsumer');

var _PreferencesConsumer2 = _interopRequireDefault(_PreferencesConsumer);

var _ComponentWrapper = require('../basic/ComponentWrapper');

var _ComponentWrapper2 = _interopRequireDefault(_ComponentWrapper);

var _InputGroup = require('../../styles/InputGroup');

var _InputGroup2 = _interopRequireDefault(_InputGroup);

var _InputWrapper = require('../../styles/InputWrapper');

var _InputWrapper2 = _interopRequireDefault(_InputWrapper);

var _InputAddon = require('../../styles/InputAddon');

var _InputAddon2 = _interopRequireDefault(_InputAddon);

var _IconGroup = require('../../styles/IconGroup');

var _IconGroup2 = _interopRequireDefault(_IconGroup);

var _IconWrapper = require('../../styles/IconWrapper');

var _IconWrapper2 = _interopRequireDefault(_IconWrapper);

var _SearchSvg = require('../shared/SearchSvg');

var _SearchSvg2 = _interopRequireDefault(_SearchSvg);

var _Container = require('../../styles/Container');

var _Container2 = _interopRequireDefault(_Container);

var _Title = require('../../styles/Title');

var _Title2 = _interopRequireDefault(_Title);

var _Input = require('../../styles/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Button = require('../../styles/Button');

var _Button2 = _interopRequireDefault(_Button);

var _SuggestionItem = require('./addons/SuggestionItem');

var _SuggestionItem2 = _interopRequireDefault(_SuggestionItem);

var _utils = require('../../utils');

var _Mic = require('./addons/Mic');

var _Mic2 = _interopRequireDefault(_Mic);

var _CancelSvg = require('../shared/CancelSvg');

var _CancelSvg2 = _interopRequireDefault(_CancelSvg);

var _CustomSvg = require('../shared/CustomSvg');

var _CustomSvg2 = _interopRequireDefault(_CustomSvg);

var _SuggestionWrapper = require('./addons/SuggestionWrapper');

var _SuggestionWrapper2 = _interopRequireDefault(_SuggestionWrapper);

var _AutofillSvg = require('../shared/AutofillSvg');

var _AutofillSvg2 = _interopRequireDefault(_AutofillSvg);

var _Flex = require('../../styles/Flex');

var _Flex2 = _interopRequireDefault(_Flex);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var useConstructor = function useConstructor() {
	var callBack = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

	var _useState = (0, _react.useState)(false),
	    hasBeenCalled = _useState[0],
	    setHasBeenCalled = _useState[1];

	if (hasBeenCalled) return;
	callBack();
	setHasBeenCalled(true);
};

var SearchBox = function SearchBox(props) {
	var selectedValue = props.selectedValue,
	    selectedCategory = props.selectedCategory,
	    value = props.value,
	    defaultValue = props.defaultValue,
	    componentId = props.componentId,
	    rawData = props.rawData,
	    aggregationData = props.aggregationData,
	    isLoading = props.isLoading,
	    error = props.error,
	    onData = props.onData,
	    onChange = props.onChange,
	    focusShortcuts = props.focusShortcuts,
	    defaultQuery = props.defaultQuery,
	    filterLabel = props.filterLabel,
	    showFilter = props.showFilter,
	    URLParams = props.URLParams,
	    customQuery = props.customQuery,
	    customEvents = props.customEvents;


	var internalComponent = (0, _transform.getInternalComponentID)(componentId);

	var _useState2 = (0, _react.useState)(''),
	    currentValue = _useState2[0],
	    setCurrentValue = _useState2[1];

	var _useState3 = (0, _react.useState)(props.isOpen),
	    isOpen = _useState3[0],
	    setIsOpen = _useState3[1];

	var _inputRef = (0, _react.useRef)(null);
	var stats = function stats() {
		return (0, _helper.getResultStats)(props);
	};

	var parsedSuggestions = function parsedSuggestions() {
		var suggestionsArray = [];
		if (Array.isArray(props.suggestions) && props.suggestions.length) {
			suggestionsArray = [].concat((0, _helper.withClickIds)(props.suggestions));
		}

		var sectionsAccumulated = [];
		var sectionisedSuggestions = suggestionsArray.reduce(function (acc, d, currentIndex) {
			if (sectionsAccumulated.includes(d.sectionId)) return acc;
			if (d.sectionId) {
				acc[currentIndex] = suggestionsArray.filter(function (g) {
					return g.sectionId === d.sectionId;
				});
				sectionsAccumulated.push(d.sectionId);
			} else {
				acc[currentIndex] = d;
			}
			return acc;
		}, {});
		return Object.values(sectionisedSuggestions);
	};
	var focusSearchBox = function focusSearchBox(event) {
		var elt = event.target || event.srcElement;
		var tagName = elt.tagName;
		if (elt.isContentEditable || tagName === 'INPUT' || tagName === 'SELECT' || tagName === 'TEXTAREA') {
			// already in an input
			return;
		}

		if (_inputRef.current) {
			_inputRef.current.focus();
		}
	};
	var listenForFocusShortcuts = function listenForFocusShortcuts() {
		if ((0, _utils.isEmpty)(focusShortcuts)) {
			return;
		}

		// for single press keys (a-z, A-Z) &, hotkeys' combinations such as 'cmd+k', 'ctrl+shft+a', etc
		(0, _hotkeysJs2.default)((0, _utils.parseFocusShortcuts)(focusShortcuts).join(','),
		/* eslint-disable no-shadow */
		// eslint-disable-next-line no-unused-vars
		function (event, handler) {
			// Prevent the default refresh event under WINDOWS system
			event.preventDefault();
			focusSearchBox(event);
		});

		// if one of modifier keys are used, they are handled below
		(0, _hotkeysJs2.default)('*', function (event) {
			var modifierKeys = (0, _utils.extractModifierKeysFromFocusShortcuts)(focusShortcuts);

			if (modifierKeys.length === 0) return;

			for (var index = 0; index < modifierKeys.length; index += 1) {
				var element = modifierKeys[index];
				if (_hotkeysJs2.default[element]) {
					focusSearchBox(event);
					break;
				}
			}
		});
	};
	var triggerClickAnalytics = function triggerClickAnalytics(searchPosition, documentId) {
		var docId = documentId;
		if (!docId) {
			var hitData = parsedSuggestions().find(function (hit) {
				return hit._click_id === searchPosition;
			});
			if (hitData && hitData.source && hitData.source._id) {
				docId = hitData.source._id;
			}
		}
		props.triggerAnalytics(searchPosition, docId);
	};

	var shouldQuery = function shouldQuery(value, dataFields, props) {
		var finalQuery = [];
		var phrasePrefixFields = [];
		var fields = dataFields.map(function (dataField) {
			var queryField = '' + dataField.field + (dataField.weight ? '^' + dataField.weight : '');
			if (!(dataField.field.endsWith('.keyword') || dataField.field.endsWith('.autosuggest') || dataField.field.endsWith('.search'))) {
				phrasePrefixFields.push(queryField);
			}
			return queryField;
		});
		if (props.searchOperators || props.queryString) {
			return {
				query: value,
				fields: fields,
				default_operator: props.queryFormat
			};
		}

		if (props.queryFormat === 'and') {
			finalQuery.push({
				multi_match: {
					query: value,
					fields: fields,
					type: 'cross_fields',
					operator: 'and'
				}
			});
			finalQuery.push({
				multi_match: {
					query: value,
					fields: fields,
					type: 'phrase',
					operator: 'and'
				}
			});
			if (phrasePrefixFields.length > 0) {
				finalQuery.push({
					multi_match: {
						query: value,
						fields: phrasePrefixFields,
						type: 'phrase_prefix',
						operator: 'and'
					}
				});
			}
			return finalQuery;
		}

		finalQuery.push({
			multi_match: {
				query: value,
				fields: fields,
				type: 'best_fields',
				operator: 'or',
				fuzziness: props.fuzziness ? props.fuzziness : 0
			}
		});

		finalQuery.push({
			multi_match: {
				query: value,
				fields: fields,
				type: 'phrase',
				operator: 'or'
			}
		});

		if (phrasePrefixFields.length > 0) {
			finalQuery.push({
				multi_match: {
					query: value,
					fields: phrasePrefixFields,
					type: 'phrase_prefix',
					operator: 'or'
				}
			});
		}

		return finalQuery;
	};

	var searchBoxDefaultQuery = function searchBoxDefaultQuery(value, props) {
		var finalQuery = null;

		var fields = (0, _helper.normalizeDataField)(props.dataField, props.fieldWeights);
		if (value) {
			if (props.queryString) {
				finalQuery = {
					query_string: shouldQuery(value, fields, props)
				};
			} else if (props.searchOperators) {
				finalQuery = {
					simple_query_string: shouldQuery(value, fields, props)
				};
			} else {
				finalQuery = {
					bool: {
						should: shouldQuery(value, fields, props),
						minimum_should_match: '1'
					}
				};
			}
		}

		if (value === '') {
			finalQuery = {
				bool: {
					should: shouldQuery(value, fields, props),
					minimum_should_match: '1'
				}
			};
		}

		if (finalQuery && props.nestedField) {
			finalQuery = {
				nested: {
					path: props.nestedField,
					query: finalQuery
				}
			};
		}
		return finalQuery;
	};

	// fires query to fetch suggestion
	var triggerDefaultQuery = function triggerDefaultQuery(paramValue) {
		if (!props.autosuggest) {
			return;
		}
		var value = typeof paramValue !== 'string' ? currentValue : paramValue;
		var query = searchBoxDefaultQuery(value, props);
		if (defaultQuery) {
			var defaultQueryTobeSet = defaultQuery(value, props) || {};
			if (defaultQueryTobeSet.query) {
				query = defaultQueryTobeSet.query;
			}
			// Update calculated default query in store
			(0, _helper.updateDefaultQuery)(componentId, props, value);
		}
		props.updateQuery({
			componentId: internalComponent,
			query: query,
			value: value,
			componentType: _constants.componentTypes.searchBox
		});
	};

	// fires query to fetch results(dependent components are affected here)
	var triggerCustomQuery = function triggerCustomQuery(paramValue) {
		var categoryValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;

		var value = typeof paramValue !== 'string' ? currentValue : paramValue;
		var query = searchBoxDefaultQuery('' + value + (categoryValue ? ' in ' + categoryValue : ''), props);
		if (customQuery) {
			var customQueryTobeSet = customQuery(value, props) || {};
			var queryTobeSet = customQueryTobeSet.query;
			if (queryTobeSet) {
				query = queryTobeSet;
			}
			(0, _helper.updateCustomQuery)(componentId, props, value);
		}
		props.updateQuery({
			componentId: componentId,
			value: value,
			query: query,
			label: filterLabel,
			showFilter: showFilter,
			URLParams: URLParams,
			componentType: _constants.componentTypes.searchBox,
			category: categoryValue
		});
	};

	var triggerQuery = function triggerQuery() {
		var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		    _ref$isOpen = _ref.isOpen,
		    isOpen = _ref$isOpen === undefined ? undefined : _ref$isOpen,
		    _ref$customQuery = _ref.customQuery,
		    customQuery = _ref$customQuery === undefined ? false : _ref$customQuery,
		    _ref$defaultQuery = _ref.defaultQuery,
		    defaultQuery = _ref$defaultQuery === undefined ? false : _ref$defaultQuery,
		    _ref$value = _ref.value,
		    value = _ref$value === undefined ? undefined : _ref$value,
		    _ref$categoryValue = _ref.categoryValue,
		    categoryValue = _ref$categoryValue === undefined ? undefined : _ref$categoryValue;

		if (typeof isOpen === 'boolean') {
			setIsOpen(isOpen);
		}

		if (customQuery) {
			triggerCustomQuery(value, categoryValue);
		}
		if (defaultQuery) {
			triggerDefaultQuery(value);
		}
	};

	var onValueSelected = function onValueSelected() {
		var valueSelected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : currentValue;
		var cause = arguments[1];
		var suggestion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
		var onValueSelected = props.onValueSelected;

		if (onValueSelected) {
			onValueSelected(valueSelected, cause, suggestion);
		}
	};
	var handleTextChange = (0, _helper.debounce)(function () {
		var valueParam = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
		var cause = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
		var enterButton = props.enterButton;

		if (cause === _causes2.default.CLEAR_VALUE) {
			triggerCustomQuery(valueParam);
			triggerDefaultQuery(valueParam);
		} else if (props.autosuggest) {
			triggerDefaultQuery(valueParam);
		} else if (value === undefined && !onChange && !enterButton) {
			triggerCustomQuery(valueParam);
		}
	}, props.debounce);

	var setValue = function setValue(value) {
		var isDefaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		var setValueProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : props;
		var cause = arguments[3];
		var hasMounted = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
		var toggleIsOpen = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
		var categoryValue = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : undefined;

		var performUpdate = function performUpdate() {
			if (hasMounted) {
				if (toggleIsOpen) setIsOpen(!isOpen);
				setCurrentValue(value);
				if (isDefaultValue) {
					if (props.autosuggest) {
						triggerQuery(_extends({}, toggleIsOpen && { isOpen: !isOpen }, {
							defaultQuery: true,
							value: value
						}));
					}
					// in case of strict selection only SUGGESTION_SELECT should be able
					// to set the query otherwise the value should reset
					if (setValueProps.strictSelection) {
						if (cause === _causes2.default.SUGGESTION_SELECT || value === '') {
							triggerCustomQuery(value, categoryValue);
						} else {
							setValue('', true);
						}
					} else {
						triggerCustomQuery(value, categoryValue);
					}
				} else {
					// debounce for handling text while typing
					handleTextChange(value, cause);
				}
				if (setValueProps.onValueChange) setValueProps.onValueChange(value);
			} else {
				triggerQuery({
					defaultQuery: props.autosuggest,
					customQuery: true,
					value: value,
					categoryValue: categoryValue
				});
				if (setValueProps.onValueChange) setValueProps.onValueChange(value);
			}
		};
		(0, _helper.checkValueChange)(setValueProps.componentId, value, setValueProps.beforeValueChange, performUpdate);
	};
	var withTriggerQuery = function withTriggerQuery(func) {
		if (func) {
			return function (e) {
				return func(e, function () {
					var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { isOpen: false },
					    isOpen = _ref2.isOpen;

					return setValue(props.value, !isOpen, props);
				});
			};
		}
		return undefined;
	};

	var handleFeaturedSuggestionClicked = function handleFeaturedSuggestionClicked(suggestion) {
		try {
			if (suggestion.action === _helper.featuredSuggestionsActionTypes.NAVIGATE) {
				var _JSON$parse = JSON.parse(suggestion.subAction),
				    _JSON$parse$target = _JSON$parse.target,
				    target = _JSON$parse$target === undefined ? '_self' : _JSON$parse$target,
				    _JSON$parse$link = _JSON$parse.link,
				    link = _JSON$parse$link === undefined ? '/' : _JSON$parse$link;

				if (typeof window !== 'undefined') {
					window.open(link, target);
				}
			}
			if (suggestion.action === _helper.featuredSuggestionsActionTypes.FUNCTION) {
				// eslint-disable-next-line no-new-func
				var func = new Function('return ' + suggestion.subAction)();
				func(suggestion, currentValue, customEvents);
			}
			// blur is important to close the dropdown
			// on selecting one of featured suggestions
			// else Downshift probably is focusing the dropdown
			// and not letting it close
			_inputRef.current.blur();
		} catch (e) {
			console.error('Error: There was an error parsing the subAction for the featured suggestion with label, "' + suggestion.label + '"', e);
		}
	};

	var onSuggestionSelected = function onSuggestionSelected(suggestion) {
		setIsOpen(false);
		// handle featured suggestions click event
		if (suggestion._suggestion_type === _helper.suggestionTypes.Featured) {
			handleFeaturedSuggestionClicked(suggestion);
			return;
		}

		var suggestionValue = suggestion.value;

		if (value === undefined) {
			setValue(suggestionValue, true, props, _causes2.default.SUGGESTION_SELECT, true, false, suggestion._category);
		} else if (onChange) {
			onChange(suggestionValue, function () {
				var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
				    isOpen = _ref3.isOpen;

				return triggerQuery({
					customQuery: true,
					value: suggestionValue,
					categoryValue: suggestion._category,
					isOpen: isOpen
				});
			});
		}
		// Record analytics for selected suggestions
		triggerClickAnalytics(suggestion._click_id);
		// onValueSelected is user interaction driven:
		// it should be triggered irrespective of controlled (or)
		// uncontrolled component behavior
		onValueSelected(suggestionValue, _causes2.default.SUGGESTION_SELECT, suggestion);
	};

	var onInputChange = function onInputChange(e) {
		var inputValue = e.target.value;

		if (!isOpen && props.autosuggest) {
			setIsOpen(true);
		}
		if (value === undefined) {
			setValue(inputValue, false, props, inputValue === '' ? _causes2.default.CLEAR_VALUE : undefined, true, false);
		} else if (onChange) {
			// handle caret position in controlled components
			(0, _utils.handleCaretPosition)(e);
			onChange(inputValue, function () {
				var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
				    isOpen = _ref4.isOpen;

				return triggerQuery({
					customQuery: true,
					value: inputValue,
					isOpen: isOpen
				});
			}, e);
		}
	};
	var enterButtonOnClick = function enterButtonOnClick() {
		return triggerQuery({ isOpen: false, value: currentValue, customQuery: true });
	};

	var handleKeyDown = function handleKeyDown(event) {
		var highlightedIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

		// if a suggestion was selected, delegate the handling
		// to suggestion handler
		if (event.key === 'Enter') {
			if (props.autosuggest === false) {
				enterButtonOnClick();
			} else if (highlightedIndex === null) {
				setValue(event.target.value, true);
				onValueSelected(event.target.value, _causes2.default.ENTER_PRESS);
			}
		}

		if (props.onKeyDown) {
			props.onKeyDown(event, undefined.triggerQuery);
		}
	};

	var clearValue = function clearValue() {
		setValue('', false, props, _causes2.default.CLEAR_VALUE, true, false);
		if (onChange) {
			onChange('', function () {
				var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
				    isOpen = _ref5.isOpen;

				return triggerQuery({
					customQuery: true,
					value: '',
					isOpen: isOpen
				});
			});
		}
		onValueSelected('', _causes2.default.CLEAR_VALUE, null);
	};

	var shouldMicRender = function shouldMicRender(showVoiceSearch) {
		// checks for SSR
		if (typeof window === 'undefined') return false;
		return showVoiceSearch && (window.webkitSpeechRecognition || window.SpeechRecognition);
	};

	var handleStateChange = function handleStateChange(changes, stateAndHelpers) {
		var isOpen = changes.isOpen,
		    type = changes.type;
		var selectedItem = stateAndHelpers.selectedItem;

		if (type === _downshift2.default.stateChangeTypes.mouseUp && isOpen !== undefined) {
			setIsOpen(isOpen);
		}

		// allow invoking click event repeatedly on featured suggestions
		if (!changes.selectedItem && (type === _downshift2.default.stateChangeTypes.clickItem || type === _downshift2.default.stateChangeTypes.keyDownEnter) && selectedItem && selectedItem._suggestion_type === _helper.suggestionTypes.Featured) {
			onSuggestionSelected(selectedItem);
		}
	};

	var handleSearchIconClick = function handleSearchIconClick() {
		if (currentValue.trim()) {
			setValue(currentValue, true);
			onValueSelected(currentValue, _causes2.default.SEARCH_ICON_CLICK);
		}
	};

	var handleVoiceResults = function handleVoiceResults(_ref6) {
		var results = _ref6.results;

		if (results && results[0] && results[0].isFinal && results[0][0] && results[0][0].transcript && results[0][0].transcript.trim()) {
			setValue(results[0][0].transcript.trim(), true, props, undefined, true, isOpen);
		}
	};

	var renderNoSuggestion = function renderNoSuggestion() {
		var finalSuggestionsList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
		var themePreset = props.themePreset,
		    theme = props.theme,
		    isLoading = props.isLoading,
		    renderNoSuggestion = props.renderNoSuggestion,
		    innerClass = props.innerClass,
		    error = props.error,
		    renderError = props.renderError;

		if (renderNoSuggestion && isOpen && !finalSuggestionsList.length && !isLoading && currentValue && !(renderError && error)) {
			return (0, _core.jsx)(
				_SuggestionWrapper2.default,
				{
					innerClass: innerClass,
					themePreset: themePreset,
					theme: theme,
					innerClassName: 'noSuggestion'
				},
				typeof renderNoSuggestion === 'function' ? renderNoSuggestion(currentValue) : renderNoSuggestion
			);
		}
		return null;
	};

	var renderLoader = function renderLoader() {
		var loader = props.loader,
		    isLoading = props.isLoading,
		    themePreset = props.themePreset,
		    theme = props.theme,
		    innerClass = props.innerClass;

		if (isLoading && loader && currentValue) {
			return (0, _core.jsx)(
				_SuggestionWrapper2.default,
				{
					innerClass: innerClass,
					innerClassName: 'loader',
					theme: theme,
					themePreset: themePreset
				},
				loader
			);
		}
		return null;
	};

	var renderError = function renderError() {
		var error = props.error,
		    renderError = props.renderError,
		    themePreset = props.themePreset,
		    theme = props.theme,
		    isLoading = props.isLoading,
		    innerClass = props.innerClass;

		if (error && renderError && currentValue && !isLoading) {
			return (0, _core.jsx)(
				_SuggestionWrapper2.default,
				{
					innerClass: innerClass,
					innerClassName: 'error',
					theme: theme,
					themePreset: themePreset
				},
				(0, _helper.isFunction)(renderError) ? renderError(error) : renderError
			);
		}
		return null;
	};

	var getComponent = function getComponent() {
		var downshiftProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		var error = props.error,
		    isLoading = props.isLoading,
		    rawData = props.rawData;


		var data = {
			error: error,
			loading: isLoading,
			downshiftProps: downshiftProps,
			data: props.suggestions,
			value: currentValue,
			triggerClickAnalytics: triggerClickAnalytics,
			resultStats: stats(),
			rawData: rawData
		};
		return (0, _helper.getComponent)(data, props);
	};
	var renderInputAddonBefore = function renderInputAddonBefore() {
		var addonBefore = props.addonBefore,
		    expandSuggestionsContainer = props.expandSuggestionsContainer;

		if (addonBefore) {
			return (0, _core.jsx)(
				_InputAddon2.default,
				{ isOpen: isOpen, expandSuggestionsContainer: expandSuggestionsContainer },
				addonBefore
			);
		}

		return null;
	};
	var renderInputAddonAfter = function renderInputAddonAfter() {
		var addonAfter = props.addonAfter,
		    expandSuggestionsContainer = props.expandSuggestionsContainer;

		if (addonAfter) {
			return (0, _core.jsx)(
				_InputAddon2.default,
				{ isOpen: isOpen, expandSuggestionsContainer: expandSuggestionsContainer },
				addonAfter
			);
		}

		return null;
	};

	var renderEnterButtonElement = function renderEnterButtonElement() {
		var enterButton = props.enterButton,
		    renderEnterButton = props.renderEnterButton,
		    innerClass = props.innerClass;


		if (enterButton) {
			var getEnterButtonMarkup = function getEnterButtonMarkup() {
				if (typeof renderEnterButton === 'function') {
					return renderEnterButton(enterButtonOnClick);
				}

				return (0, _core.jsx)(
					_Button2.default,
					{
						className: 'enter-btn ' + (0, _helper.getClassName)(innerClass, 'enter-button'),
						primary: true,
						onClick: enterButtonOnClick
					},
					'Search'
				);
			};

			return (0, _core.jsx)(
				'div',
				{ className: 'enter-button-wrapper' },
				getEnterButtonMarkup()
			);
		}

		return null;
	};

	var renderIcon = function renderIcon() {
		if (props.showIcon) {
			return props.icon || (0, _core.jsx)(_SearchSvg2.default, null);
		}
		return null;
	};

	var renderCancelIcon = function renderCancelIcon() {
		if (props.showClear) {
			return props.clearIcon || (0, _core.jsx)(_CancelSvg2.default, null);
		}
		return null;
	};

	var renderIcons = function renderIcons() {
		var showIcon = props.showIcon,
		    showClear = props.showClear,
		    renderMic = props.renderMic,
		    getMicInstance = props.getMicInstance,
		    showVoiceSearch = props.showVoiceSearch,
		    iconPosition = props.iconPosition,
		    innerClass = props.innerClass;

		return (0, _core.jsx)(
			'div',
			null,
			(0, _core.jsx)(
				_IconGroup2.default,
				{ groupPosition: 'right', positionType: 'absolute' },
				currentValue && showClear && (0, _core.jsx)(
					_IconWrapper2.default,
					{ onClick: clearValue, showIcon: showIcon, isClearIcon: true },
					renderCancelIcon()
				),
				shouldMicRender(showVoiceSearch) && (0, _core.jsx)(_Mic2.default, {
					getInstance: getMicInstance,
					render: renderMic,
					onResult: handleVoiceResults,
					className: (0, _helper.getClassName)(innerClass, 'mic') || null
				}),
				iconPosition === 'right' && (0, _core.jsx)(
					_IconWrapper2.default,
					{ onClick: handleSearchIconClick },
					renderIcon()
				)
			),
			(0, _core.jsx)(
				_IconGroup2.default,
				{ groupPosition: 'left', positionType: 'absolute' },
				iconPosition === 'left' && (0, _core.jsx)(
					_IconWrapper2.default,
					{ onClick: handleSearchIconClick },
					renderIcon()
				)
			)
		);
	};

	var handleFocus = function handleFocus(event) {
		if (props.autosuggest) {
			setIsOpen(true);
		}
		if (props.onFocus) {
			props.onFocus(event, triggerQuery);
		}
	};

	var onAutofillClick = function onAutofillClick(suggestion) {
		var value = suggestion.value;
		setIsOpen(true);
		setCurrentValue(value);
		triggerDefaultQuery(value);
	};

	var hasMounted = (0, _react.useRef)();
	useConstructor(function () {
		if (!props.enableAppbase) {
			throw new Error('enableAppbase is required to be true when using SearchBox component.');
		}
		var currentLocalValue = selectedValue || value || defaultValue || '';

		hasMounted.current = false;
		if (currentLocalValue) {
			if (props.onChange) {
				props.onChange(currentLocalValue, function () {
					var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
					    isOpen = _ref7.isOpen;

					return triggerQuery({
						customQuery: true,
						value: currentLocalValue,
						isOpen: isOpen
					});
				});
			}
		}
		setCurrentValue(currentLocalValue);

		// Set custom and default queries in store
		triggerCustomQuery(currentLocalValue, selectedCategory);
		triggerDefaultQuery(currentLocalValue);
	});

	(0, _react.useEffect)(function () {
		if (onData) {
			onData({
				data: parsedSuggestions(),
				rawData: rawData,
				aggregationData: aggregationData,
				loading: isLoading,
				error: error
			});
		}
	}, [rawData, aggregationData, isLoading, error]);

	(0, _react.useEffect)(function () {
		if (hasMounted.current) {
			if (value !== undefined && currentValue !== value) {
				setValue(value, !isOpen && props.autosuggest && !props.strictSelection, props, undefined, undefined, false);
			}
		}
	}, [value]);

	(0, _react.useEffect)(function () {
		if (
		// since, selectedValue will be updated when currentValue changes,
		// we must only check for the changes introduced by
		// clear action from SelectedFilters component in which case,
		// the currentValue will never match the updated selectedValue
		// currentValue !== props.defaultValue &&
		hasMounted.current && currentValue !== selectedValue && !(typeof currentValue !== 'string' && !selectedValue)) {
			if (!selectedValue && currentValue) {
				// selected value is cleared, call onValueSelected
				onValueSelected('', _causes2.default.CLEAR_VALUE, null);
			}
			if (value === undefined) {
				setValue(selectedValue || '', true, props, undefined, hasMounted.current, false);
			} else if (onChange) {
				if (value !== selectedValue && selectedValue !== currentValue) {
					// value prop exists
					onChange(selectedValue || '', function () {
						var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
						    isOpen = _ref8.isOpen;

						return triggerQuery({
							customQuery: true,
							value: selectedValue || '',
							isOpen: isOpen
						});
					});
				}
			} else {
				// value prop exists and onChange is not defined:
				// we need to put the current value back into the store
				// if the clear action was triggered by interacting with
				// selected-filters component

				setValue(currentValue, true, props, undefined, true, false);
			}
		}
	}, [selectedValue]);

	(0, _react.useEffect)(function () {
		hasMounted.current = true;
		// register hotkeys for listening to focusShortcuts' key presses
		listenForFocusShortcuts();
	}, []);

	var hasSuggestions = function hasSuggestions() {
		return Array.isArray(parsedSuggestions()) && parsedSuggestions().length;
	};
	return (0, _core.jsx)(
		_Container2.default,
		{ style: props.style, className: props.className },
		props.title && (0, _core.jsx)(
			_Title2.default,
			{ className: (0, _helper.getClassName)(props.innerClass, 'title') || null },
			props.title
		),
		props.autosuggest ? (0, _core.jsx)(_downshift2.default, _extends({
			id: props.componentId + '-downshift',
			onChange: onSuggestionSelected,
			onStateChange: handleStateChange,
			isOpen: isOpen,
			itemToString: function itemToString(i) {
				return i;
			},
			render: function render(_ref9) {
				var getRootProps = _ref9.getRootProps,
				    getInputProps = _ref9.getInputProps,
				    getItemProps = _ref9.getItemProps,
				    isOpen = _ref9.isOpen,
				    highlightedIndex = _ref9.highlightedIndex,
				    setHighlightedIndex = _ref9.setHighlightedIndex,
				    rest = _objectWithoutProperties(_ref9, ['getRootProps', 'getInputProps', 'getItemProps', 'isOpen', 'highlightedIndex', 'setHighlightedIndex']);

				var renderSuggestionsDropdown = function renderSuggestionsDropdown() {
					var getIcon = function getIcon(iconType, item) {
						switch (iconType) {
							case _helper.suggestionTypes.Recent:
								return props.recentSearchesIcon;
							case _helper.suggestionTypes.Popular:
								return props.popularSearchesIcon;
							case _helper.suggestionTypes.Featured:
								if (item.icon) {
									return (0, _core.jsx)('div', {
										style: { display: 'flex' },
										dangerouslySetInnerHTML: {
											__html: (0, _xss2.default)(item.icon)
										}
									});
								}
								return (0, _core.jsx)('img', { src: (0, _xss2.default)(item.iconURL), alt: item.value });

							default:
								return null;
						}
					};

					// action icon is dispkayed on right of the suggestion item
					var getActionIcon = function getActionIcon(item) {
						if (item._suggestion_type === _helper.suggestionTypes.Featured) {
							if (item.action === _helper.featuredSuggestionsActionTypes.FUNCTION) {
								return (0, _core.jsx)(_AutofillSvg2.default, {
									style: {
										transform: 'rotate(135deg)',
										pointerEvents: 'none'
									}
								});
							}
							return null;
						} else if (!item._category) {
							/* 👇 avoid showing autofill for category suggestions👇 */

							return (0, _core.jsx)(_AutofillSvg2.default, {
								onClick: function onClick(e) {
									e.stopPropagation();
									onAutofillClick(item);
								}
							});
						}
						return null;
					};

					var indexOffset = 0;
					return (0, _core.jsx)(
						_react2.default.Fragment,
						null,
						(0, _helper.hasCustomRenderer)(props) && getComponent(_extends({
							getInputProps: getInputProps,
							getItemProps: getItemProps,
							isOpen: isOpen,
							highlightedIndex: highlightedIndex,
							setHighlightedIndex: setHighlightedIndex
						}, rest)),
						isOpen && renderLoader(),
						isOpen && renderError(),
						!(0, _helper.hasCustomRenderer)(props) && isOpen && hasSuggestions() ? (0, _core.jsx)(
							'ul',
							{
								css: (0, _Input.searchboxSuggestions)(props.themePreset, props.theme),
								className: '' + (0, _helper.getClassName)(props.innerClass, 'list')
							},
							parsedSuggestions().map(function (item, itemIndex) {
								var index = indexOffset + itemIndex;
								if (Array.isArray(item)) {
									var sectionHtml = (0, _xss2.default)(item[0].sectionLabel);
									indexOffset += item.length - 1;
									return (0, _core.jsx)(
										'div',
										{
											className: 'section-container',
											key: '' + item[0].sectionId
										},
										sectionHtml && (0, _core.jsx)('div', {
											className: 'section-header ' + (0, _helper.getClassName)(props.innerClass, 'section-label'),
											dangerouslySetInnerHTML: {
												__html: sectionHtml
											}
										}),
										(0, _core.jsx)(
											'ul',
											{ className: 'section-list' },
											item.map(function (sectionItem, sectionIndex) {
												return (0, _core.jsx)(
													'li',
													_extends({}, getItemProps({
														item: sectionItem
													}), {
														key: sectionItem.sectionId + sectionIndex + '-' + sectionItem.value,
														style: {
															justifyContent: 'flex-start',
															alignItems: 'center'
														},
														className: '' + (highlightedIndex === index + sectionIndex ? 'active-li-item ' + (0, _helper.getClassName)(props.innerClass, 'active-suggestion-item') : 'li-item ' + (0, _helper.getClassName)(props.innerClass, 'suggestion-item'))
													}),
													props.renderItem ? props.renderItem(sectionItem) : (0, _core.jsx)(
														_react2.default.Fragment,
														null,
														(0, _core.jsx)(
															'div',
															{
																style: {
																	padding: '0 10px 0 0',
																	display: 'flex'
																}
															},
															(0, _core.jsx)(_CustomSvg2.default, {
																iconId: sectionIndex + index + 1 + '-' + sectionItem.value + '-icon',
																className: (0, _helper.getClassName)(props.innerClass, sectionItem._suggestion_type + '-search-icon') || null,
																icon: getIcon(sectionItem._suggestion_type, sectionItem),
																type: sectionItem._suggestion_type + '-search-icon'
															})
														),
														(0, _core.jsx)(
															'div',
															{ className: 'trim' },
															(0, _core.jsx)(
																_Flex2.default,
																{ direction: 'column' },
																sectionItem.label && (0, _core.jsx)('div', {
																	className: 'section-list-item__label',
																	dangerouslySetInnerHTML: {
																		__html: (0, _xss2.default)(sectionItem.label)
																	}
																}),
																sectionItem.description && (0, _core.jsx)('div', {
																	className: 'section-list-item__description',
																	dangerouslySetInnerHTML: {
																		__html: (0, _xss2.default)(sectionItem.description)
																	}
																})
															)
														),
														getActionIcon(sectionItem)
													)
												);
											})
										)
									);
								}

								return (0, _core.jsx)(
									'li',
									_extends({}, getItemProps({ item: item }), {
										key: index + 1 + '-' + item.value,
										style: {
											justifyContent: 'flex-start',
											alignItems: 'center'
										},
										className: '' + (highlightedIndex === index ? 'active-li-item ' + (0, _helper.getClassName)(props.innerClass, 'active-suggestion-item') : 'li-item ' + (0, _helper.getClassName)(props.innerClass, 'suggestion-item'))
									}),
									props.renderItem ? props.renderItem(item) : (0, _core.jsx)(
										_react2.default.Fragment,
										null,
										(0, _core.jsx)(
											'div',
											{
												style: {
													padding: '0 10px 0 0',
													display: 'flex'
												}
											},
											(0, _core.jsx)(_CustomSvg2.default, {
												iconId: index + 1 + '-' + item.value + '-icon',
												className: (0, _helper.getClassName)(props.innerClass, item._suggestion_type + '-search-icon') || null,
												icon: getIcon(item._suggestion_type, item),
												type: item._suggestion_type + '-search-icon'
											})
										),
										(0, _core.jsx)(_SuggestionItem2.default, {
											currentValue: currentValue || '',
											suggestion: item
										}),
										getActionIcon(item)
									)
								);
							})
						) : renderNoSuggestion(parsedSuggestions())
					);
				};

				return (0, _core.jsx)(
					'div',
					getRootProps({ css: _Input.suggestionsContainer }, { suppressRefError: true }),
					(0, _core.jsx)(
						_InputGroup2.default,
						{ isOpen: isOpen },
						renderInputAddonBefore(),
						(0, _core.jsx)(
							_InputWrapper2.default,
							null,
							(0, _core.jsx)(_Input2.default, _extends({
								'aria-label': props.componentId,
								id: props.componentId + '-input',
								showIcon: props.showIcon,
								showClear: props.showClear,
								iconPosition: props.iconPosition,
								ref: _inputRef
							}, getInputProps({
								className: (0, _helper.getClassName)(props.innerClass, 'input'),
								placeholder: props.placeholder,
								value: currentValue === null ? '' : currentValue,
								onChange: onInputChange,
								onBlur: withTriggerQuery(props.onBlur),
								onFocus: handleFocus,
								onClick: function onClick() {
									// clear highlighted index
									setHighlightedIndex(null);
								},
								onKeyPress: withTriggerQuery(props.onKeyPress),
								onKeyDown: function onKeyDown(e) {
									return handleKeyDown(e, highlightedIndex);
								},
								onKeyUp: withTriggerQuery(props.onKeyUp),
								autoFocus: props.autoFocus
							}), {
								themePreset: props.themePreset,
								type: props.type,
								searchBox: true // a prop specific to Input styled-component
								, isOpen: isOpen // is dropdown open or not
							})),
							renderIcons(),
							!props.expandSuggestionsContainer && renderSuggestionsDropdown.apply(undefined, [getRootProps, getInputProps, getItemProps, isOpen, highlightedIndex, setHighlightedIndex].concat(rest))
						),
						renderInputAddonAfter(),
						renderEnterButtonElement()
					),
					props.expandSuggestionsContainer && renderSuggestionsDropdown.apply(undefined, [getRootProps, getInputProps, getItemProps, isOpen, highlightedIndex, setHighlightedIndex].concat(rest))
				);
			}
		}, props.downShiftProps)) : (0, _core.jsx)(
			'div',
			{ css: _Input.suggestionsContainer },
			(0, _core.jsx)(
				_InputGroup2.default,
				{ isOpen: false },
				renderInputAddonBefore(),
				(0, _core.jsx)(
					_InputWrapper2.default,
					null,
					(0, _core.jsx)(_Input2.default, {
						'aria-label': props.componentId,
						className: (0, _helper.getClassName)(props.innerClass, 'input') || null,
						placeholder: props.placeholder,
						value: currentValue || '',
						onChange: onInputChange,
						onBlur: withTriggerQuery(props.onBlur),
						onFocus: withTriggerQuery(props.onFocus),
						onKeyPress: withTriggerQuery(props.onKeyPress),
						onKeyDown: handleKeyDown,
						onKeyUp: withTriggerQuery(props.onKeyUp),
						autoFocus: props.autoFocus,
						iconPosition: props.iconPosition,
						showIcon: props.showIcon,
						showClear: props.showClear,
						themePreset: props.themePreset,
						searchBox: true // a prop specific to Input styled-component
						, isOpen: false // is dropdown open or not
					}),
					renderIcons()
				),
				renderInputAddonAfter(),
				renderEnterButtonElement()
			)
		)
	);
};
SearchBox.propTypes = {
	updateQuery: _types2.default.funcRequired,
	selectedValue: _types2.default.selectedValue,
	selectedCategory: _types2.default.string,
	suggestions: _types2.default.suggestions,
	triggerAnalytics: _types2.default.funcRequired,
	error: _types2.default.title,
	isLoading: _types2.default.bool,
	time: _types2.default.number,
	enableAppbase: _types2.default.bool,
	rawData: _types2.default.rawData,
	aggregationData: _types2.default.aggregationData,
	// component props
	autoFocus: _types2.default.bool,
	autosuggest: _types2.default.bool,
	enableSynonyms: _types2.default.bool,
	distinctField: _types2.default.string,
	distinctFieldConfig: _types2.default.componentObject,
	index: _types2.default.string,
	enablePopularSuggestions: _types2.default.bool,
	enableRecentSuggestions: _types2.default.bool,
	queryString: _types2.default.bool,
	beforeValueChange: _types2.default.func,
	className: _types2.default.string,
	clearIcon: _types2.default.children,
	componentId: _types2.default.stringRequired,
	customHighlight: _types2.default.func,
	customQuery: _types2.default.func,
	defaultQuery: _types2.default.func,
	dataField: _types2.default.dataFieldValidator,
	aggregationField: _types2.default.string,
	aggregationSize: _types2.default.number,
	size: _types2.default.number,
	debounce: _types2.default.number,
	defaultValue: _types2.default.string,
	value: _types2.default.string,
	customData: _types2.default.title,
	downShiftProps: _types2.default.props,
	children: _types2.default.func,
	excludeFields: _types2.default.excludeFields,
	fieldWeights: _types2.default.fieldWeights,
	filterLabel: _types2.default.string,
	fuzziness: _types2.default.fuzziness,
	highlight: _types2.default.bool,
	highlightField: _types2.default.stringOrArray,
	icon: _types2.default.children,
	iconPosition: _types2.default.iconPosition,
	innerClass: _types2.default.style,
	includeFields: _types2.default.includeFields,
	loader: _types2.default.title,
	nestedField: _types2.default.string,
	onError: _types2.default.func,
	onBlur: _types2.default.func,
	onFocus: _types2.default.func,
	onKeyDown: _types2.default.func,
	onKeyPress: _types2.default.func,
	onKeyUp: _types2.default.func,
	onQueryChange: _types2.default.func,
	onValueChange: _types2.default.func,
	onChange: _types2.default.func,
	onValueSelected: _types2.default.func,
	placeholder: _types2.default.string,
	queryFormat: _types2.default.queryFormatSearch,
	react: _types2.default.react,
	render: _types2.default.func,
	renderError: _types2.default.title,
	renderNoSuggestion: _types2.default.title,
	showClear: _types2.default.bool,
	showDistinctSuggestions: _types2.default.bool,
	showFilter: _types2.default.bool,
	showIcon: _types2.default.bool,
	showVoiceSearch: _types2.default.bool,
	style: _types2.default.style,
	title: _types2.default.title,
	theme: _types2.default.style,
	themePreset: _types2.default.themePreset,
	type: _types2.default.string,
	URLParams: _types2.default.bool,
	strictSelection: _types2.default.bool,
	searchOperators: _types2.default.bool,
	enablePredictiveSuggestions: _types2.default.bool,
	recentSearchesIcon: _types2.default.componentObject,
	popularSearchesIcon: _types2.default.componentObject,
	// Mic props
	getMicInstance: _types2.default.func,
	renderMic: _types2.default.func,
	//
	focusShortcuts: _types2.default.focusShortcuts,
	addonBefore: _types2.default.children,
	addonAfter: _types2.default.children,
	expandSuggestionsContainer: _types2.default.bool,
	popularSuggestionsConfig: _types2.default.componentObject,
	recentSuggestionsConfig: _types2.default.componentObject,
	applyStopwords: _types2.default.bool,
	customStopwords: _types2.default.stringArray,
	onData: _types2.default.func,
	renderItem: _types2.default.func,
	isOpen: _types2.default.bool,
	enableIndexSuggestions: _types2.default.bool,
	enableFeaturedSuggestions: _types2.default.bool,
	featuredSuggestionsConfig: _types2.default.componentObject,
	indexSuggestionsConfig: _types2.default.componentObject,
	enterButton: _types2.default.bool,
	renderEnterButton: _types2.default.func,
	customEvents: _types2.default.componentObject,
	searchboxId: _types2.default.string
};

SearchBox.defaultProps = {
	autosuggest: true,
	className: null,
	debounce: 0,
	downShiftProps: {},
	enableSynonyms: true,
	enablePopularSuggestions: false,
	excludeFields: [],
	iconPosition: 'left',
	includeFields: ['*'],
	placeholder: 'Search',
	queryFormat: 'or',
	showFilter: true,
	showIcon: true,
	showVoiceSearch: false,
	style: {},
	URLParams: false,
	showClear: false,
	showDistinctSuggestions: true,
	strictSelection: false,
	searchOperators: false,
	size: 10,
	time: 0,
	focusShortcuts: ['/'],
	addonBefore: undefined,
	addonAfter: undefined,
	expandSuggestionsContainer: true,
	suggestions: [],
	isOpen: false,
	enterButton: false
};

var mapStateToProps = function mapStateToProps(state, props) {
	return {
		selectedValue: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].value || null,
		selectedCategory: state.selectedValues[props.componentId] && state.selectedValues[props.componentId].category || null,
		suggestions: state.hits[props.componentId] && state.hits[props.componentId].hits,
		rawData: state.rawData[props.componentId],
		aggregationData: state.compositeAggregations[props.componentId],
		themePreset: state.config.themePreset,
		isLoading: !!state.isLoading[props.componentId + '_active'],
		error: state.error[props.componentId],
		enableAppbase: state.config.enableAppbase,
		time: state.hits[props.componentId] && state.hits[props.componentId].time,
		total: state.hits[props.componentId] && state.hits[props.componentId].total,
		hidden: state.hits[props.componentId] && state.hits[props.componentId].hidden,
		customEvents: state.config.analyticsConfig ? state.config.analyticsConfig.customEvents : {}
	};
};

var mapDispatchtoProps = function mapDispatchtoProps(dispatch) {
	return {
		updateQuery: function updateQuery(updateQueryObject) {
			return dispatch((0, _actions.updateQuery)(updateQueryObject));
		},
		triggerAnalytics: function triggerAnalytics(searchPosition, documentId) {
			return dispatch((0, _actions.recordSuggestionClick)(searchPosition, documentId));
		},
		setCustomQuery: function setCustomQuery(component, query) {
			return dispatch((0, _actions.setCustomQuery)(component, query));
		},
		setDefaultQuery: function setDefaultQuery(component, query) {
			return dispatch((0, _actions.setDefaultQuery)(component, query));
		}
	};
};

var ConnectedComponent = (0, _utils.connect)(mapStateToProps, mapDispatchtoProps)((0, _emotionTheming.withTheme)(function (props) {
	return (0, _core.jsx)(SearchBox, _extends({ ref: props.myForwardedRef }, props));
}));

// eslint-disable-next-line
var ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {
	return (0, _core.jsx)(
		_PreferencesConsumer2.default,
		{ userProps: props },
		function (preferenceProps) {
			return (0, _core.jsx)(
				_ComponentWrapper2.default,
				_extends({}, preferenceProps, {
					internalComponent: true,
					componentType: _constants.componentTypes.searchBox
				}),
				function () {
					return (0, _core.jsx)(ConnectedComponent, _extends({}, preferenceProps, { myForwardedRef: ref }));
				}
			);
		}
	);
});
(0, _hoistNonReactStatics2.default)(ForwardRefComponent, SearchBox);

ForwardRefComponent.displayName = 'SearchBox';
exports.default = ForwardRefComponent;