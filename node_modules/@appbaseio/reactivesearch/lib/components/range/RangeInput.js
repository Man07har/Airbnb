'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _propTypes = require('prop-types');

var _dateFormats = require('@appbaseio/reactivecore/lib/utils/dateFormats');

var _dateFormats2 = _interopRequireDefault(_dateFormats);

var _DayPickerInput = require('react-day-picker/DayPickerInput');

var _DayPickerInput2 = _interopRequireDefault(_DayPickerInput);

var _xdate = require('xdate');

var _xdate2 = _interopRequireDefault(_xdate);

var _RangeSlider = require('./RangeSlider');

var _RangeSlider2 = _interopRequireDefault(_RangeSlider);

var _Input = require('../../styles/Input');

var _Input2 = _interopRequireDefault(_Input);

var _Flex = require('../../styles/Flex');

var _Flex2 = _interopRequireDefault(_Flex);

var _Content = require('../../styles/Content');

var _Content2 = _interopRequireDefault(_Content);

var _Container = require('../../styles/Container');

var _Container2 = _interopRequireDefault(_Container);

var _utils = require('../../utils');

var _DateContainer = require('../../styles/DateContainer');

var _DateContainer2 = _interopRequireDefault(_DateContainer);

var _PreferencesConsumer = require('../basic/PreferencesConsumer');

var _PreferencesConsumer2 = _interopRequireDefault(_PreferencesConsumer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DATE_FORMAT = 'yyyy-MM-dd';

var RangeInput = function (_Component) {
	_inherits(RangeInput, _Component);

	function RangeInput(props) {
		_classCallCheck(this, RangeInput);

		var _this = _possibleConstructorReturn(this, _Component.call(this, props));

		_initialiseProps.call(_this);

		var queryFormat = props.queryFormat,
		    range = props.range;

		if (queryFormat) {
			if (!(0, _helper.isValidDateRangeQueryFormat)(queryFormat)) {
				throw new Error('queryFormat is not supported. Try with a valid queryFormat.');
			}
			if (!(0, _xdate2.default)(range.start).valid() || !(0, _xdate2.default)(range.end).valid()) {
				throw new Error('`reactivesearch` uses XDate for processing date-types, Try passing valid value(s) accepted by the XDate constructor. XDate ref: https://arshaw.com/xdate/#Parsing');
			}
		} else if (typeof range.start !== 'number' || typeof range.end !== 'number') {
			throw new Error('`RangeSlider` expects numerics, strings/ objects(date) are exception when dealing with date-types. Provide a valid queryFormat if you intend to use date-types.');
		}

		var value = props.value || props.defaultValue || props.range;
		if (props.selectedValue) {
			value = {
				start: props.selectedValue[0],
				end: props.selectedValue[1]
			};
		}
		if (!_this.shouldUpdate(value)) {
			// assign the range if not valid
			value = props.range;
		}

		var _getValueArrayWithinL = (0, _utils.getValueArrayWithinLimits)((0, _utils.getNumericRangeArray)(value, props.queryFormat), (0, _utils.getNumericRangeArray)(props.range, props.queryFormat)),
		    start = _getValueArrayWithinL[0],
		    end = _getValueArrayWithinL[1];

		_this.state = {
			start: start,
			end: end,
			isStartValid: true,
			isEndValid: true,
			// specific to date-range-inputs
			dateHovered: null,
			startKey: 'on-start',
			endKey: 'on-end'
		};
		return _this;
	}

	RangeInput.prototype.componentDidMount = function componentDidMount() {
		var _props = this.props,
		    enableAppbase = _props.enableAppbase,
		    index = _props.index;

		if (!enableAppbase && index) {
			console.warn('Warning(ReactiveSearch): In order to use the `index` prop, the `enableAppbase` prop must be set to true in `ReactiveBase`.');
		}
	};

	RangeInput.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
		var prevValue = prevProps.queryFormat && prevProps.value ? (0, _utils.getNumericRangeArray)(prevProps.value, prevProps.queryFormat) : null;
		var currentValue = this.props.queryFormat && this.props.value ? (0, _utils.getNumericRangeArray)(this.props.value, this.props.queryFormat) : null;
		if (!(0, _helper.isEqual)(prevValue, currentValue)) {
			this.handleSlider(this.props.value);
		}
	};

	// for SSR


	RangeInput.prototype.displayNumericInputs = function displayNumericInputs() {
		return _react2.default.createElement(
			_Flex2.default,
			{ className: (0, _helper.getClassName)(this.props.innerClass, 'input-container') || null },
			_react2.default.createElement(
				_Flex2.default,
				{ direction: 'column', flex: 2 },
				_react2.default.createElement(_Input2.default, {
					name: 'start',
					type: 'number',
					value: this.value.start,
					step: this.props.stepValue,
					max: this.value.end,
					alert: !this.state.isStartValid,
					onChange: this.handleInputChange,
					className: (0, _helper.getClassName)(this.props.innerClass, 'input') || null,
					themePreset: this.props.themePreset,
					'aria-label': this.props.componentId + '-start-input'
				}),
				!this.state.isStartValid && _react2.default.createElement(
					_Content2.default,
					{ alert: true },
					'Input range is invalid'
				)
			),
			_react2.default.createElement(
				_Flex2.default,
				{ justifyContent: 'center', alignItems: 'center', flex: 1 },
				'-'
			),
			_react2.default.createElement(
				_Flex2.default,
				{ direction: 'column', flex: 2 },
				_react2.default.createElement(_Input2.default, {
					name: 'end',
					type: 'number',
					value: this.value.end,
					step: this.props.stepValue,
					min: this.value.start,
					alert: !this.state.isEndValid,
					onChange: this.handleInputChange,
					className: (0, _helper.getClassName)(this.props.innerClass, 'input') || null,
					themePreset: this.props.themePreset,
					'aria-label': this.props.componentId + '-end-input'
				}),
				!this.state.isEndValid && _react2.default.createElement(
					_Content2.default,
					{ alert: true },
					'Input range is invalid'
				)
			)
		);
	};

	/* START: handling for date range input */

	RangeInput.prototype.displayDateInputs = function displayDateInputs() {
		var _state = this.state,
		    start = _state.start,
		    end = _state.end,
		    dateHovered = _state.dateHovered;

		var startDate = (0, _xdate2.default)(start) || '';
		var endDate = (0, _xdate2.default)(end) || '';
		var endDay = start && end ? dateHovered : '';
		var selectedDays = { from: startDate, to: endDay };
		var modifiers = { start: new Date(start), end: endDay };
		return _react2.default.createElement(
			_DateContainer2.default,
			{ range: true },
			_react2.default.createElement(
				_Flex2.default,
				{ className: (0, _helper.getClassName)(this.props.innerClass, 'input-container') || null },
				_react2.default.createElement(
					_Flex2.default,
					{
						flex: 2,
						iconPosition: 'right',
						showBorder: true,
						style: {
							background: 'transparent'
						}
					},
					_react2.default.createElement(_DayPickerInput2.default, {
						ref: this.getStartDateRef,
						formatDate: function formatDate(date) {
							return (0, _utils.formatDateString)(date, DATE_FORMAT);
						},
						value: (0, _utils.formatDateString)(startDate, DATE_FORMAT),
						key: this.state.startKey,
						placeholder: 'yyyy-MM-dd',
						dayPickerProps: {
							initialMonth: new _xdate2.default(this.state.start || ''),
							numberOfMonths: 2,
							disabledDays: {
								before: this.props.range.start && (0, _xdate2.default)(this.props.range.start) || '',
								after: this.props.range.end && (0, _xdate2.default)(this.props.range.end) || ''
							},
							selectedDays: selectedDays,
							modifiers: modifiers
						},
						inputProps: {
							'aria-label': this.props.componentId + '-start-input'
						},
						onDayChange: this.handleStartDate,
						classNames: {
							container: 'DayPickerInput',
							overlayWrapper: 'DayPickerInput-OverlayWrapper',
							overlay: 'DayPickerInput-Overlay'
						}
					})
				),
				_react2.default.createElement(
					_Flex2.default,
					{ justifyContent: 'center', alignItems: 'center', basis: '20px' },
					'-'
				),
				_react2.default.createElement(
					_Flex2.default,
					{
						flex: 2,
						iconPosition: 'right',
						showBorder: true,
						style: {
							background: 'transparent'
						}
					},
					_react2.default.createElement(_DayPickerInput2.default, {
						ref: this.getEndDateRef,
						formatDate: function formatDate(date) {
							return (0, _utils.formatDateString)(date, DATE_FORMAT);
						},
						value: (0, _utils.formatDateString)(endDate, DATE_FORMAT),
						key: this.state.endKey,
						placeholder: 'yyyy-MM-dd',
						dayPickerProps: {
							initialMonth: new _xdate2.default(this.state.end || ''),
							numberOfMonths: 2,
							onDayMouseEnter: this.handleDayMouseEnter,
							disabledDays: {
								after: this.props.range.end && (0, _xdate2.default)(this.props.range.end) || '',
								before: this.props.range.start && (0, _xdate2.default)(this.props.range.start) || ''
							},
							selectedDays: selectedDays,
							modifiers: modifiers
						},
						inputProps: {
							'aria-label': this.props.componentId + '-end-input'
						},
						onDayChange: this.handleEndDate,
						classNames: {
							container: 'DayPickerInput',
							overlayWrapper: 'DayPickerInput-OverlayWrapper',
							overlay: 'DayPickerInput-Overlay'
						}
					})
				)
			)
		);
	};
	/* END: handling for date range input */

	RangeInput.prototype.render = function render() {
		var _props2 = this.props,
		    className = _props2.className,
		    style = _props2.style,
		    rest = _objectWithoutProperties(_props2, ['className', 'style']);

		var _getNumericRangeArray = (0, _utils.getNumericRangeArray)(this.props.range, this.props.queryFormat),
		    rangeStart = _getNumericRangeArray[0],
		    rangeEnd = _getNumericRangeArray[1];

		var computeSliderRangeValues = _extends({}, this.props.queryFormat ? { start: new _xdate2.default(rangeStart), end: new _xdate2.default(rangeEnd) } : this.props.range);

		return _react2.default.createElement(
			_Container2.default,
			{ style: style, className: className },
			_react2.default.createElement(_RangeSlider2.default, _extends({}, rest, {
				value: {
					start: this.state.isStartValid ? +this.value.start : rangeStart,
					end: this.state.isEndValid ? +this.value.end : rangeEnd
				},
				onChange: this.handleSliderChange,
				className: (0, _helper.getClassName)(this.props.innerClass, 'slider-container') || null,
				range: computeSliderRangeValues,
				_dateFormat: DATE_FORMAT
			})),
			(0, _helper.isValidDateRangeQueryFormat)(this.props.queryFormat) ? this.displayDateInputs() : this.displayNumericInputs()
		);
	};

	_createClass(RangeInput, [{
		key: 'isControlled',
		get: function get() {
			return !!(this.props.value && this.props.onChange);
		}
	}, {
		key: 'value',
		get: function get() {
			var _ref = this.isControlled ? (0, _utils.getNumericRangeArray)(this.props.value, this.props.queryFormat) : [this.state.start, this.state.end],
			    valueStart = _ref[0],
			    valueEnd = _ref[1];

			return {
				start: valueStart,
				end: valueEnd
			};
		}
	}]);

	return RangeInput;
}(_react.Component);

RangeInput.defaultQuery = _RangeSlider2.default.defaultQuery;
RangeInput.parseValue = _RangeSlider2.default.parseValue;

var _initialiseProps = function _initialiseProps() {
	var _this2 = this;

	this.handleInputChange = function (e) {
		var _extends2;

		var _e$target = e.target,
		    name = _e$target.name,
		    value = _e$target.value;

		var parsedValue = (0, _utils.getNumericRangeValue)(value, !!_this2.props.queryFormat);
		if (Number.isNaN(parsedValue)) {
			// set errors for invalid inputs
			if (name === 'start') {
				_this2.setState({
					isStartValid: false
				});
			} else {
				_this2.setState({
					isEndValid: false
				});
			}
		} else {
			// reset error states for valid inputs
			// eslint-disable-next-line
			if (name === 'start' && !_this2.state.isStartValid) {
				_this2.setState({
					isStartValid: true
				});
			} else if (name === 'end' && !_this2.state.isEndValid) {
				_this2.setState({
					isEndValid: true
				});
			}
		}

		var currentValue = _extends({}, _this2.value, (_extends2 = {}, _extends2[name] = parsedValue, _extends2));
		var _props3 = _this2.props,
		    valueProp = _props3.value,
		    onChange = _props3.onChange;

		if (_this2.shouldUpdate(currentValue)) {
			if (valueProp === undefined) {
				var _this2$setState;

				_this2.setState((_this2$setState = {}, _this2$setState[name] = parsedValue, _this2$setState));
			} else if (onChange) {
				onChange(currentValue);
			}
		}
	};

	this.shouldUpdate = function () {
		var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		var validateRange = _this2.props.validateRange;

		if (validateRange) {
			return validateRange([value.start, value.end]);
		}
		return true;
	};

	this.handleSliderChange = function (sliderValue) {
		var _ref2 = sliderValue || [_this2.props.range.start, _this2.props.range.end],
		    start = _ref2[0],
		    end = _ref2[1];

		var _props4 = _this2.props,
		    value = _props4.value,
		    onChange = _props4.onChange;


		if (value === undefined) {
			_this2.handleSlider({ start: start, end: end });
		} else if (onChange) {
			onChange({ start: start, end: end });
		}
	};

	this.handleSlider = function (value) {
		var _getNumericRangeArray2 = (0, _utils.getNumericRangeArray)(value, _this2.props.queryFormat),
		    start = _getNumericRangeArray2[0],
		    end = _getNumericRangeArray2[1];

		if (!_this2.isControlled) {
			_this2.setState({
				// we store only numeric
				start: start,
				end: end
			});
		}
		if (_this2.props.onValueChange) {
			_this2.props.onValueChange({
				// returning a dateobject in case of date-type usage
				// else return the numeric, which is the default type
				start: _this2.props.queryFormat ? new Date(start) : start,
				end: _this2.props.queryFormat ? new Date(end) : end
			});
		}
	};

	this.getEndDateRef = function (ref) {
		_this2.endDateRef = ref;
	};

	this.getStartDateRef = function (ref) {
		_this2.startDateRef = ref;
	};

	this.handleStartDate = function (date) {
		var autoFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
		var currentDateEnd = _this2.state.end;

		var end = currentDateEnd || '';
		var _props5 = _this2.props,
		    value = _props5.value,
		    onChange = _props5.onChange;

		if ((!value || value && !value.start) && !onChange) {
			if (_this2.startDateRef.getInput().value.length === 10) {
				_this2.setState(function (state) {
					return {
						startKey: state.startKey === 'on-start' ? 'off-start' : 'on-start',
						start: (0, _utils.getValueArrayWithinLimits)([(0, _xdate2.default)(date).getTime(), end], (0, _utils.getNumericRangeArray)(_this2.props.range, _this2.props.queryFormat))[0],
						end: end
					};
				});
				// focus the end date DayPicker if its empty
				if (autoFocus) {
					_this2.endDateRef.getInput().focus();
				}
			}
		} else if (onChange) {
			if (_this2.startDateRef.getInput().value.length === 10) {
				onChange(_extends({
					start: (0, _utils.getValueArrayWithinLimits)([(0, _xdate2.default)(date).getTime(), currentDateEnd], (0, _utils.getNumericRangeArray)(_this2.props.range, _this2.props.queryFormat))[0]
				}, end && (0, _xdate2.default)(end).valid() ? { end: new Date(end) } : {}));
				// focus the end date DayPicker if its empty
				if (autoFocus) {
					_this2.endDateRef.getInput().focus();
				}
				// this will trigger a remount on the date component
				// since DayPickerInput doesn't respect the controlled behavior setting on its own
				_this2.setState(function (state) {
					return {
						startKey: state.startKey === 'on-start' ? 'off-start' : 'on-start'
					};
				});
			}
		} else {
			// this will trigger a remount on the date component
			// since DayPickerInput doesn't respect the controlled behavior setting on its own
			_this2.setState(function (state) {
				return {
					startKey: state.startKey === 'on-start' ? 'off-start' : 'on-start'
				};
			});
		}
	};

	this.handleEndDate = function (selectedDay) {
		var currentDateStart = _this2.state.start;
		var _props6 = _this2.props,
		    value = _props6.value,
		    onChange = _props6.onChange;

		var start = currentDateStart || '';

		if ((value === undefined || value && !value.end) && !onChange) {
			if (_this2.endDateRef.getInput().value.length === 10) {
				_this2.handleDayMouseEnter(selectedDay);
				_this2.setState(function (state) {
					return {
						endKey: state.endKey === 'on-end' ? 'off-end' : 'on-end',
						start: start,
						end: (0, _utils.getValueArrayWithinLimits)([start, (0, _xdate2.default)(selectedDay).getTime()], (0, _utils.getNumericRangeArray)(_this2.props.range, _this2.props.queryFormat))[1]
					};
				});
			}
		} else if (onChange) {
			if (_this2.endDateRef.getInput().value.length === 10) {
				onChange(_extends({}, start && new _xdate2.default(start).valid() ? { start: new _xdate2.default(start) } : {}, {
					end: (0, _utils.getValueArrayWithinLimits)([currentDateStart, (0, _xdate2.default)(selectedDay).getTime()], (0, _utils.getNumericRangeArray)(_this2.props.range, _this2.props.queryFormat))[1]
				}));
			}
			// this will trigger a remount on the date component
			// since DayPickerInput doesn't respect the controlled behavior setting on its own
			_this2.setState(function (state) {
				return {
					endKey: state.endKey === 'on-end' ? 'off-end' : 'on-end'
				};
			});
		} else {
			// this will trigger a remount on the date component
			// since DayPickerInput doesn't respect the controlled behavior setting on its own
			_this2.setState(function (state) {
				return {
					endKey: state.endKey === 'on-end' ? 'off-end' : 'on-end'
				};
			});
		}
	};

	this.handleDayMouseEnter = function (day) {
		_this2.setState({
			dateHovered: day // date hovered is stored as is, in date object format
		});
	};
};

RangeInput.propTypes = {
	className: _types2.default.string,
	defaultValue: _types2.default.range,
	validateRange: _types2.default.func,
	value: _types2.default.range,
	selectedValue: _types2.default.selectedValue,
	innerClass: _types2.default.style,
	onValueChange: _types2.default.func,
	onChange: _types2.default.func,
	range: _types2.default.range,
	rangeLabels: _types2.default.rangeLabels,
	stepValue: _types2.default.number,
	style: _types2.default.style,
	themePreset: _types2.default.themePreset,
	showHistogram: _types2.default.bool,
	componentId: _types2.default.stringRequired,
	includeNullValues: _types2.default.bool,
	enableAppbase: _types2.default.bool,
	index: _types2.default.string,
	queryFormat: (0, _propTypes.oneOf)([].concat(Object.keys(_dateFormats2.default))),
	calendarInterval: _types2.default.calendarInterval
};

RangeInput.defaultProps = {
	range: {
		start: 0,
		end: 10
	},
	stepValue: 1,
	includeNullValues: false,
	showHistogram: true
};

var mapStateToProps = function mapStateToProps(state, props) {
	return {
		themePreset: state.config.themePreset,
		selectedValue: state.selectedValues[props.componentId] ? state.selectedValues[props.componentId].value : null,
		enableAppbase: state.config.enableAppbase
	};
};

var ConnectedComponent = (0, _utils.connect)(mapStateToProps, null)(function (props) {
	return _react2.default.createElement(RangeInput, _extends({ ref: props.myForwardedRef }, props));
});

// eslint-disable-next-line
var ForwardRefComponent = _react2.default.forwardRef(function (props, ref) {
	return _react2.default.createElement(
		_PreferencesConsumer2.default,
		{ userProps: props },
		function (preferenceProps) {
			return _react2.default.createElement(ConnectedComponent, _extends({}, preferenceProps, { myForwardedRef: ref }));
		}
	);
});
(0, _hoistNonReactStatics2.default)(ForwardRefComponent, RangeInput);

ForwardRefComponent.displayName = 'RangeInput';
exports.default = ForwardRefComponent;