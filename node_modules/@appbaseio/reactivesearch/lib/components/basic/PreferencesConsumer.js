'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _propTypes = require('prop-types');

var _utils = require('../../utils');

/**
 * PreferencesConsumer reads the preferences from SearchPreferencesContext
 * and set the props from preferences to the component
 *
 */
var deepValue = function deepValue(o, p) {
	return p.split('.').reduce(function (a, v) {
		return a[v];
	}, o);
};

var PreferencesConsumer = function PreferencesConsumer(_ref) {
	var children = _ref.children,
	    userProps = _ref.userProps;

	var context = (0, _react.useContext)(_utils.SearchPreferencesContext);
	if (!userProps || !userProps.componentId) {
		throw Error('ReactiveSearch: componentId is required');
	}
	var componentId = userProps.componentId;
	var preferencesPath = userProps.preferencesPath;
	var preferences = void 0;
	if (context) {
		if (preferencesPath) {
			// read preferences from path
			preferences = deepValue(context, preferencesPath);
		} else {
			preferences = deepValue(context, ['componentSettings', componentId].join('.'));
			// read preferences from componentSettings
		}
	}
	// Retrieve component specific preferences
	var componentProps = userProps;
	if (preferences) {
		if (preferences.rsConfig) {
			componentProps = _extends({}, preferences.rsConfig, componentProps);
		} else {
			componentProps = _extends({}, preferences, componentProps);
		}
		if (preferences.enabled !== undefined && !preferences.enabled) {
			return null;
		}
	}
	// Parse component props
	Object.keys(componentProps).forEach(function (p) {
		if (typeof componentProps[p] === 'string') {
			if (['defaultQuery', 'customQuery', 'setOption'].includes(p)) {
				// eslint-disable-next-line
				componentProps[p] = eval(componentProps[p]);
			}
		}
	});
	return children(componentProps);
};

PreferencesConsumer.propTypes = {
	userProps: (0, _propTypes.shape)({})
};

exports.default = PreferencesConsumer;